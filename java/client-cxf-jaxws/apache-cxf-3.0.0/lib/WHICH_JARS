This directory includes the CXF jar, the CXF manifest jar, the required
dependencies, and many optional dependencies. The "modules" directory
contains the cxf.jar split up into smaller pieces if you wish to use only
specific parts of CXF.

The 'manifest jar' is a jar containing only a MANIFEST.MF with a classpath
that calls in all the other jar.

Jars marked with a [6] at the end are optional for Java 6 (update 4 or 
later is supported) as the functionality provided by those jars are 
provided in the JDK.

Some users may prefer to use axis2-saaj.jar rather than saaj-impl.jar. Both are
supported.

The following jars are required for all CXF usage:
- cxf.jar
- geronimo-javamail.jar (Or the Sun equivalent) [6]
  (MAY be able to remove javamail if you don't use any MIME/MTOM/SAAJ type things)
- jaxb-api.jar  [6]
- jaxb-impl.jar (this is a [6] for normal runtime, but is required for 
                 tooling and the dynamic clients)
- xmlschema-core.jar
- woodstox-core-asl.jar
- stax2-api.jar
- slf4j-*.jar
- jcl-over-slf4j.jar

Note: woodstox and stax2-api can be removed if you set the 
"org.apache.cxf.stax.allowInsecureParser‚Äù system property to true.  This
is NOT recommended as it opens up various DOS attacks.

The following jars are required for XML catalog support:
- xml-resolver.jar 

For Java2WSDL and WSDL2Java:
- The above jars
- jaxb-xjc.jar
- velocity.jar
- commons-collections.jar
- commons-lang.jar
- cxf-xjc*.jar (optional, these are xjc extensions for providing enhanced
        JAXB code generation)

For JAX-WS support:
- neethi.jar
- wsdl4j.jar
- geronimo-jaxws_2.2_spec-1.0.jar (Or the Sun equivalent) [6]
- saaj-api.jar [6]
- saaj-impl.jar [6]
- asm.jar (semi-optional, helps with performance of wrapper types and is 
        required when adding JAXB annotations onto the SEI methods and 
	parameters.)

For XML Configuration support:
- aopalliance.jar
- spring-beans.jar
- spring-context.jar
- spring-core.jar

For hosting web services within WARs while using Spring-based CXFServlet:
- spring-web.jar

For standalone HTTP support use Jetty:
- geronimo-servlet.jar
- jetty-*.jar
- sl4j.jar & sl4j-jdk14.jar (optional - but improves logging)

For standalone HTTP support use Netty:
- geronimo-servlet.jar
- netty-*.jar
 
For Aegis support:
- jdom.jar (optional, if you want to map xsd:anyType to JDOM)

For XmlBeans databinding support:
- xmlbeans.jar

For WS-Security support:
- wss4j-*.jar
- xmlsec.jar
- ehcache-core.jar
- jasypt.jar

For SAML support in WS-Security
- joda-time.jar 
- opensaml.jar
- openws.jar
- xmltooling.jar
- xalan.jar

For JAX-RS support:
- abdera*  (optional: for AtomPub support, but also needed for the 
            Management log browser console)
- commons-codec.jar (Needed for Abdera)
- jaxen.jar (Needed for Abdera)
- axiom* (Needed for Abdera)
- javax.ws.rs-api.jar
- jettison.jar (Needed for JSON services only)
- oauth*.jar (Needed for OAuth support)

For JMS transport
- geronimo-jms.jar (Or the Sun equivalent)
- geronimo-jta.jar (Or the Sun equivalent)

For the UDP transport
- mina-core.jar

For the Async HTTP client transport
- commons-codec.jar
- httpasyncclient.jar
- httpcore.jar
- httpclient.jar
- httpcore-nio.jar

For CORBA support:
- antlr.jar

For JavaScript functionality:
- js.jar

For schema validation with the Aegis data binding.

 - msv-core.jar
 - xsdlib.jar
 - isorelax.jar
 - relaxngDatatype.jar

For the WS-Notification Service:
 - cxf-services-wsn-api.jar
 - cxf-services-wsn-core.jar  
 - activemq*.jar
 - hawtbuf.jar
 - geronimo-j2ee-management_1.1_spec.jar

For the CXF Security Token Service:
 - cxf-services-sts-core.jar

For the WS-Discovery Service
 - cxf-ws-discovery-api.jar
 - cxf-ws-discovery-service.jar




